```text
project-root/
├── LICENSE
├── README.md
├── pyproject.toml
├── requirements.txt
├── setup.cfg
├── main.py                  # entry-point: builds example truss & launches viewer
│
├── testing/                 # pytest modules
│   ├── test_elements.py
│   ├── test_postprocessing.py
│   └── test_solver.py
│
└── visualiser/              # core renderer package
    ├── __init__.py
    │
    ├── mesh_data.py         # MeshData: normalize & buffer raw FEA data
    ├── mesh_adapter.py      # Scene + VisualData adapter → VBO/EBO, draw calls
    │
    ├── shader.py            # ShaderManager & colormap lookup texture loader
    ├── camera.py            # Camera: orbit/pan/zoom/reset + VP matrix
    ├── view_manager.py      # ViewManager: preset registry & goTo(name)
    ├── projection_manager.py# ProjectionManager: ortho/persp matrix builders
    ├── input_controller.py  # InputController: keyboard/mouse → camera/scene/etc.
    ├── hud_overlay.py       # HUDOverlay: orthographic pass for text & legends
    ├── renderer.py          # Renderer: main loop, clears, draws Scene + HUD
    │
    ├── render2d.py          # TrussViewer: 2D slice mode (for planar elements)
    ├── render3d.py          # Visualiser23: 3D wireframe & deformation overlay
    ├── visualiser23.py      # high-level wrapper over render3d + input presets
    └── viewer_app.py        # example app: ties VisualData → launch_viewer()
    │
    └── shaders/             # GLSL + colormap assets
        ├── line.vert
        ├── line.frag
        └── colormaps/
            ├── viridis.png
            └── plasma.png
```


┌───────────┐
│   main()  │
└───────────┘
     │
     │ 1. load raw FEA arrays
     ▼
┌──────────────────┐
│   MeshData       │
│──────────────────│
│ __init__(nodes,  │
│         elems,   │
│         disp,    │
│         field)   │
│ _nodes3d → 3D    │
│ buffers:         │
│ node_buffer,     │
│ disp_buffer,     │
│ index_buffer     │
└──────────────────┘
     │
     │ 2. wrap for GPU & draw
     ▼
┌──────────────────┐
│    Scene         │  ←─ holds a MeshData
│──────────────────│
│ __init__(mesh_dt)│  • glGenBuffers
│ update_displacements(buf)
│ toggle_deformed_visibility()
│ draw(shader)
└──────────────────┘
     │
     │ 3. prepare shaders
     ▼
┌──────────────────┐
│ ShaderManager    │
│──────────────────│
│ __init__(vert_src,frag_src)
│ compile(), link()
│ load_colormap(img)
│ use(program, uniforms…)
│ cycle_colormap()
└──────────────────┘
     │
     │ 4. set up camera
     ▼
┌──────────────────┐
│   Camera         │
│──────────────────│
│ __init__(default_cfg)
│ orbit(dx,dy), pan(dx,dy), zoom(d)
│ reset()
│ get_view_matrix()
└──────────────────┘
     │
     │ 5. add named views
     ▼
┌──────────────────┐
│  ViewManager     │
│──────────────────│
│ add(name, config)│
│ goTo(name)       │  →sets Camera state
└──────────────────┘
     │
     │ 6. project to screen
     ▼
┌──────────────────┐
│ProjectionManager │
│──────────────────│
│ get_proj_matrix(camera, aspect)
└──────────────────┘
     │
     │ 7. handle input
     ▼
┌──────────────────┐
│InputController   │
│──────────────────│
│ __init__(cam,    │
│           views, │
│           scene, │
│           shader)
│ on_key(key)      │
│ on_mouse(dx,dy)  │
│ on_scroll(delta) │
└──────────────────┘
     │
     │ 8. draw HUD
     ▼
┌──────────────────┐
│ HUDOverlay       │
│──────────────────│
│ draw(current_view,│
│      current_map) │
└──────────────────┘
     │
     │ 9. main render loop
     ▼
┌──────────────────┐
│   Renderer       │
│──────────────────│
│ __init__(scene,  │
│           shader,│
│           camera,│
│           proj,  │
│           hud)   │
│ start():         │
│   while running: │
│     clear buffers│
│     vp = camera.get_VP(proj,aspect)
│     shader.use(vp)
│     scene.draw(shader)
│     hud.draw()
│     swap_buffers()│
└──────────────────┘
.-
